system api - they conect with system to consume the data 
process - where the data transaction and processing happens here

mocking - for testing purpose, whether the api are deployable and endpoints are working fine or not 

secured api and unsecured api:
making request using securly - by passing the header client_id and cliend_secret
v-core - processing platform 

rest api - are process api 
connector - mostly rest api

workers - deticated instance runtime. 
for running and scaling the applications, vertical and horizontal scaling 

mule events - 
attributes - meta data and other headers
paylaod - data 
variable

mule 4 are based on events 

Naming convention simple as possible and it is important 

Domain - used for many project to listen in a single port 

adding new dependency restarting the application is quite good 

raml 

/resourse 
  methods 

https://docs.mulesoft.com/mule-runtime/4.2/streaming-about

/api/* - wildcard where it can accept any string (?) resourse 

transform message
map - it looks like arrow function or lamda function to iterrate each and every id

proxy - 

api-manager - to have policy 
runtime-manager - deploying applications?

rate limiting policy 
free
premium 

transport barrier (boundry) - when it corss to one flow to another flow the parameters became null

flows and subflow 
flows - can have oun error handling, it will have source and process
subflow - cannot have that, it uses for code reuseability 

vm listener like http to listen the point 

publish consume - will go to the vm listener 
publish - doesn't go to any flow it will end the flow what ever it got 

tooling sense - to get data sense 

destination for setpayload - attributes.queryParams.destination as String

https://docs.mulesoft.com/mule-runtime/4.2/dw-core-functions-flatten

flatten - where it works like rest parameters in js, where we can select the all the rest data from the payload


error handling - parent child relationship 
where errors can be identified 

on error continues
on error propagate 

flow level error handler 
application level error handler

data weave 

worng input 
formatting issue casues in xml which parent element is missing and other 
to check the data we can use 

application/dw 

headers?????????

map - used to iterrate each object 
$$ key index
$ value 

%dw 2.0
output application/xml
---
 
data
: {
	(payload map (object, index) -> {
		flight: index,
		destination: object.toAirportCode
	}		
)
}

ns - name space in xml 

%dw 2.0
output application/json
---
flights:
        {(     payload..*return map (object,index) ->
            {
                flight:  {
                        dest: object.destination,
                        price: object.price
                }
            }
    )}

by "using" this is local varibale in data weave

%dw 2.0
output application/json
//var numSeats = 400
//var numSeats = (x=400) -> x
var numSeats = (planeType: String) ->
        if (planeType contains('737'))
            150
        else
            300
---
    flights: payload..*return map (object,index) ->
                    {
                            dest: object.destination,
                            price: object.price,
                            planeType: object.planeType,
                            totalSeats: numSeats(object.planeType)
                    }


%dw 2.0
output application/json
var costs = 1000
//var numOfSeats = 
---
 
flights
  : payload..*return map (k, i) -> {
	// flights: k,
	seats: k.emptySeats,
	cost: costs
}                    


%dw 2.0
output application/json
type myprice = Number {class : "java.lang.Double"}
type Flight = Object {class: "com.mulesoft.training.Flight"}
//var numSeats = 400
//var numSeats = (x=400) -> x
var numSeats = (planeType: String) ->
        if (planeType contains('737'))
            150
        else
            300
---
using(flights = payload..*return map (object,index) ->
        {
                destination: object.destination,
                price: object.price as myprice,
                planeType: upper(object.planeType as String),
            //    totalSeats: numSeats(object.planeType as String),
                departureDate: object.departureDate as Date {format : "yyyy/MM/dd" }
                }
                as Flight
                )
 
     flights                        
      

"java -jar filename" to extract

corn job 
it will be picking at excat time every time no constant checking 

polling - which timer will be there and it will constanly cheking the input destination

batch processing - load and dispatch


https://training.mulesoft.com/course/fundamentals4-quiz-diy

error handling, data weave, raml, anpoint platform, http rest architecture

lince.thomas@mulesoft.com

munit mock  - it will bypass the flow and will return a value which we setup and that response will be given back or set as payload and it will further 
proceed 
mock basically will try to skip a component or flow according to our requirement. If we are trying to connect to externalize application and if we couldn't able to
establish the connection we can use mock to skip the component or flow to bypass and return response should be set so it can do further tests

system error - this is like checked exception but not exactly, this exception due to ports and other possible exception when the application start up so it cannot be 
handled  

messaging error 

event source - event source where the application starts to kick off the application from the mule runtime this is where the application starts to work and trigger the flow or in java it can be said as 
methos call, function call to invoke the function and to execute 
event processing 

workers 

mule message - attributes and payload A
variable - it comes under mule event not mule message to access them we need ask explictly

by using vars we can get all the variable in the application

runtime manager - for deploying the application 
api manager - to set policy and other things, proxy, rate limiting, json threat policy protection and many other more policy can be set in api manager

choice router - it will check based on the conditional statement and route to corresponding
scatter gather - it will pass to all the route and will execute in parallelism (only concurrently not parallelism)

queryparam, variable and payload are still accessiable when we pass from one flow to another flow using flow reference. But not checked with externalized systems and other 
stuff 

for http requester it is whole different story that payload is null query param is null only the variable have on the flow after coming it is getting lostsss

error handling - when the subflow throws an error it has error propagte and the main flow has error continue then the main flow error handler will through or give the payload which error continue has
