
API - Application programming interface (communication messenger)
Whenever a request send to server, the response will be back 

Web service - A platform or program that can run on any system over the internet 
xml,json, soap

Loose coupling and Tight coupling
Reusable 
Not reusable whole model has to be changed 

SOAP-
xml based,
highly secure

REST API

any format is acceptable
json,xml 
Http request method
get - reterive
put- update
post- new 
delete-delete
patch-partially update

linear y=x element should have the same constant increase in y, the x and y should increase gradually
expoential y= x power x;
quadratic =2x + z + 1; the change in y and change in x are should be constant - refernce khan academy video

WSDL - web service descriptive language

RAML

Monolithic ?? - Centeralized server all the load and deployment will be in single server which is scaled by vertical scaling by adding
more ram or resoruce. 
Advantages  - The request will be directly hit in one server which is good
Disadvantages - for each time a minor change or deployment is done whole server is reloaded again, one point of failure can be disaster

Inbound properties - getting response ? incoming request are inbound
Outbound properties ? - sending output, post method ??

Sandbox - For testing purpose, (production) like VM(Virtual machine)


API-LED

Anypoint Platform 

RAML- Restfull API Modeling language
It look like JSON and YAML 

Mule Application 
Maven is used in any point studio to build the projects
anypoint studio works on java 8 
Munit is mule application for testing (unit testing)
Mule appications are java applications using spring

Dataweve - converting or make changes in data

logger - o/p

http listener - for deploying purpose, kinda tomcat server ??

Transform message - used to convert the data format types. xml-> json and json to json formating

variable

flow 

subflow

payload ?? - Body of the response

flow refernce 

error handling

bug in model 9 - Transform message

Transport Barrier - the properites that cannot inherit without extending a class 

breakpoint - where the code stop for debugging purpose

Mule 4 post request for adding data american flights, logic needed to added for inserting

--------------------------

Raml

the methods in raml are lowercase
queryparameter =? google.com/search?q="query params"

baseURI: ex- something /
when mocking uri generates the base uri will append

resource :
a file type 
google.com/file - resource

------------------------------------------

sharding  - databases ? technique
latency - The delay between from request and response due to network  
round robin method

The question of whether a computer can think is no more interesting than the question of whether a submarine can swim.

--------------------------
skepticism


mutable code

dry code : bolierplate

hiccups

unintelligible

spaghetti code

-------------------------

Hardcode - default values are given, dynamically values are not hardcode

Refactoring - Improvement in code, optimization, reducing complexity
-------------
coerce
-------------

Java

Generics - parameter passing in arrayList.. etc, mostly used in colections

LinkedHashMap ? used mostly in mulesoft and collections (Data structure)

Thread join - wait for the thread to complete execution

yeild - 

Synchornized -

24

split and splice in string

Many programming languages support the conversion of a value into another of a different data type. This kind of type conversions can be implicitly or explicitly made. 
Implicit conversion, which is also called coercion, is automatically done.

-----------
{google:baseURL}search?q=%s&{google:RLZ}{google:originalQueryForSuggestion}{google:assistedQueryStats}{google:searchFieldtrialParameter}{google:iOSSearchLanguage}{google:searchClient}{google:sourceId}{google:contextualSearchVersion}ie={inputEncoding}
----------

\\in-che-infra02

loose coupling - where the class need not  to change the implementation (), making changes dosen't make code complicated
tight coupling - when we deisgn a system it is harder to change it in future, need to make changes in code (more or likely entire)

Spring d

JPA - java persistance api
used to connect orm and other tools to make sever side more business logic get things done
ORM - Object relational mapping, interacts with db
JDBC - where java can interact with db model 
pojo - plain old java objects

Centeralized and Decentralized

Centeralized - where there will be only one node, from that node each and every request hah to be passed or received which 
can make more complex and take more time to received

Decentralized - There will be more nodes, all will be seprated which will not clash with each other and make more elegant 
reduce complexity 


througput - how much time it taken for given period of time eg: 50 units can be produced in 5 hours then throughput will be 
10 units per hour 

Cache - Images and other large capacity will be stored in local storeage when the request asked by user it loads smoothly 
eg. CDN it will have MIME types of things in local storage when the request is asked the user will get instantly without 
need of waiting to load the MIME.

DNS - http://10.138.8.188/ 10.138.8.218
                                       10.109.32.189 

Unicode  - like ASCII(values) it contains more charecter, the browser able to understand multiple language and charecter with help of
unicode char set ex - utf-8  refernce : https://www.w3schools.com/html/html_charset.asp

URL - uniform resource locator -: scheme://prefix.domain:port/path/filename
scheme - defines the type of Internet service (most common is http or https, ftp and wss are used ocassionaly)
prefix - defines a domain prefix (default for http is www)
domain - defines the Internet domain name (like w3schools.com)
port - defines the port number at the host (default for http is 80)
path - defines a path at the server (If omitted: the root directory of the site)
filename - defines the name of a document or resource

Attribute  - attribute and attribute value (height = 10px)
target attribute - how the submit or link should be opened in a browser (in same page new window or tab) 

tidy - order or in clean manner

gitlens - git blame features are working after the installation of extension (files are scanned ) otherwsie gitblame dosen't work in old git files

cripple - disabled, unable to walk (for machine - serverly damaged)

code resablity - it says everything (mydefintion - code that can be refactored) 

polling frequency - in computing the data will be checking the db for specific period of time, when a new email comes it pull the notifications
check and if new it will show in notification bar.
constanly will be checking is there a new data 

Array - By default the array size will be the integer size in java so it will not go beyond that  2^31-1
Object in java - ? java.lang
foreach internal working (it differs from normal for loop)
String - comparing string (equals method) or else it refer from the refernce and check giving wrong o/p for string (dk) about char

Maven - it is build tool for java and other purpose 
Mainly used for dependency management for project 
It has remote and local repositary, where remote repositary will have the all dependency to download, first it checks with the local repositary
if there is no dependency in local repositary then it will automatically will download from the remote repositary
Maven has many parts to do create, build, run, deploy 
Pom - Project object Model, where all the configuration are made in this 
Three important factor while creating dependency are
Artifact id - This is project id for creating a maven project  
group id - This is like super class which a unique id will be created in this and it will be used across all the project 
version id - version id is similar what version we need to use or download
Maven is not just a dependency downloading thing it is more for build, develop, test, production


distributed and parallel systems 
parallel systems - where the task can run at once, ex multitasking I suppose, Process are heavy, threads are light
process occupy more memory thread can run on the process with many threads but it is efficient 
concurent systems - one thread has to be finish the process and it will continue the next one 
distributed systems - where a request can be divided or send to across multipe systems rather than single system which makes more 
efficient good for scalability for larger applications

fault tolerance
buffer handler 

why addEventlistener ? for a specific id ? or a element in dom to do operations 

bitstream and byte stream are same in somehow 
where byte stream consist of 8 octects like 8 bits combined to into single one. Objects are passed through the net by streams
objects will convert into array of byte streams (0's and 1's)  

kernel - The kernel is the central module of an operating system (OS). ... 
Typically, the kernel is responsible for memory management, process and task management, and disk management. 
The kernel connects the system hardware to the application software. Every operating system has a kernel.

normalization and denormalization in db

horizontal and vertical scaling - adding more machine horizontal, adding more resource like ram and power is called 
single point of failure can be avoided in horizontal where vertical one server takes more loads and lead to huge load on
server sharding is done in horizontal..

web server and appication server 

web server which works on mostly http protocol and static content like, images, files and multimedida it is only for web based application
appication server mostly work on business logic, http protocol, dynamic content multithreading, enterprise applications

load balancing - when a client send request to the server it will not hit directlly to one server. Load balancing technique will separate 
each request (not) there will be more servers so it will go according to the alogorithm which server is good, health check for servers 
which server is not facing downtime. checking the server whether it is running or not properly. if not request will not be re-routed to 
the corresponding server untill that server is up and re-running again.

downtime - time during which a machine, especially a computer, is out of action or unavailable to use.
throughput - the amount of material or items passing through a system or process 

https://www.chromium.org/Home/chromium-security/corb-for-developers
https://www.chromestatus.com/feature/5629709824032768


ci/cd - continous intergration / continous deployment / continous delivery
starting building the code after it is done unit test is done, but tdd is better; after unit test is done it will be commited to the
central repositary(remote like github, gitlab, bitbucket) there will be some automation will be set of which is intergration testing 
where all the developer will commit the code to remote and it will build the process.
after doing this each time we commit the code to remote automatically build will start. continous deployment is also similar to this 
where after committing it will be directly deployed in the production server. 
This is only for business model initially where we don't need to wait for very long time to see our product; we can see what is happening 
exactly in our code we can change if something goes wrong 
ex: youtube will get updated lot of time in a day where google engineer make this process I suppose  

request/response and event-driven-architecture

messaging queue/ data queue

where the data or any other type of data will be streamed in queues, millions of records or data can be processed at any point of time 
with the help of jms, kakfa and messaging queue. 
ex. when ever a new data/record found in the database it will eventually pick it up and sends to the destination and one good examples are 
pub/sub where social media like (fb, twitter, instagram, email promotion) when someone post a message it will broadcast to around millions 
of people at the time data will be sent to them, Broadcasting can also be said there are lot of other things can be done by this (i don't know)
this is read and write operation also can be done in this, messaging, storing, streaming and processing
https://google.com/robot.txt ?? amazon also have this! it shows which need to be allowed and which needs to be disallowed 
like links and other resources for web crawler. where google bot, and other search engine will not scan or index in there engine 

proxy servers - it acts as a intermediate between the client and server, In computer networks, 
a proxy server is a server that acts as an intermediary for requests from clients seeking resources from other servers

dmz - demilitarized zone restricted access to the servers or databases to secure the data

continuous function and discrete function
continuous function - cro signal and sin wave is example of continuous singal in (ECE)
discrete - are like digital 0's and 1's in form of graph 

http-tunneling : HTTP tunneling is used to create a network link between two computers in conditions of restricted network connectivity 
including firewalls, NATs and ACLs, among other restrictions. 
The tunnel is created by an intermediary called a proxy server which is usually located in a DMZ.

git:

git branch -a used to see hidden branch 
git checkout branchname 
-- to make a change or pull latest commit from master branch to local --
git fetch origin - no idea 
git merge origin/master - to pull all the changes from the master to any other branches (like development or local etc..)

"A" index has been added in the .git 
"M" changes has been made in the existing files which need to be commited 
"U" untracked which is not currently tracked by .git it should be moved to the stagging area 
"C" both modified

git branch -d branchName - it will delete the branch, but we should not be in this branch need to switch other branch and delete
git checkout -b new_branchname - creating and switching to this new branch which is created
git branch -m new_branchname - this will change the name of current branch name to new branchname
git branch merge origin/branchname - merge the current changes to branch 

git chekcout - is super cool thing where the deleted file can be restored back again and used to switch branchs also

git checkout "file name for recovering from the deleted"
git checkout . used to recover all the deleted files but it should not be commited 

to move to existing commit we can also use git checkout "commit id " first 8 digit is enough to move from one commit to another commit 
and make changes and request for a merge 

ip whitelist - ip whitelist which will denies and have control over the application web and apps. it is like restrictions
where the web or apps can be only accessed, certian websites can be only accessed through certian network ip everything will be 
get rejected for security purpose

ip blacklist - it is oppisite of whitelist which will allow control to sites most of the cases

json threat protection - json threat protection is used to avoid or inject the json from nesting or data leak for security problem
by this we can give object properties restrictions how many character should have lenght of the string can it be modified or not 
this is primarly to avoid the security risk which can cause to attack (xml threat protection is also similar except the structure will
be varying)

static ip - 

dynamic ip

go-cd - for continous intergration and continous development which 
which has two types 1. packaged pipeline 2. depolyment pipeline 
first we need to create the pipleine based on what group(under) then pipleine will be named on the naming standards after that 
what kind of version control should we need to use should mention ex: git, svn and mercurial and then mentioning git url or pulling the
code and it will start to build it. As we define in the pom package would be jar or zip. There are automatic polling and manual polling 
for this automatic polling is whenever we make changes in our project and pushed to central repositary the go-cd will pick it up and 
start the build work(branchs should be mentioned to pull the code). Manual will be we have to trigger the code everytime whenever we make
changes. After the package is build it will be published to the nexus repositary.
creating the pipeline we need to mention which environment should comes under so the package will be pushed to the nexus according to that
Template - is like set of rule how the build should happen when the pipeline is triggered there will be default template how the code should
be build. we can also make how to run by writting shell scripting where to start and how to run the code, on what order it should execute
the build 
Build can be done by maven, ant and gradle which is more poplular 
agents, jobs no idea 
template -> stage -> jobs - where jobs will run the shell script 